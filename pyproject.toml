[build-system]
requires = ["setuptools>=65.5.1", "wheel>=0.29.0"]
build-backend = "setuptools.build_meta"

[project]
name = "beamer"
version = "0.1.0"
description = "Beamer helps compare house prices in tree-lined streets"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT License"}
authors = [
    {name = "jalanb", email = "github@al-got-rhythm.net"}
]

# Core dependencies
dependencies = [
]

[project.optional-dependencies]
# Extras for app
app = [
    "beamer",
]

# Linting tools - standalone, no project dependencies needed
lint = [
    "black",
    "blackdoc",
    "flake8",
    "flake8-bugbear",
    "flake8-comprehensions",
    "flake8-eradicate",
    "flake8-isort",
    "Flake8-pyproject",
    "isort",
    "mypy",
]

# Testing needs project + dependencies
test = [
    "callee",
    "codecov",
    "coverage",
    "docker",
    "httpx",
    "pytest",
    "pytest-cov",
    "pytest-docker",
    "tox",
    "beamer",
]

# DevOps needs testing capabilities plus deployment tools
devops = [
    "beamer[test]",
    "beamer[lint]",
    "bump2version",
    "build",
]

# Full development environment
develop = [
    "beamer[devops]",
    "httpie",
    "ipython",
    "pudb",
    "pytest-pudb",
    "pytest-sugar",
    "sh",
]

[tool.setuptools.package-data]
# These patterns include doctests, which serve as both documentation and test cases,
# potentially useful for end users of beamer.
beamer = ["**/*.test", "**/*.md"]

[tool.setuptools.packages.find]
include = ["beamer*"]
exclude = ["test_*.py"]

[tool.flake8]
# https://black.readthedocs.io/en/stable/compatible_configs.html#flake8
max-line-length = 88
ignore = ["E731", "E203", "W503"]

[tool.mypy]
ignore_missing_imports = true
install_types = true
non_interactive = true
check_untyped_defs = true
strict_optional = true

[tool.isort]
profile = "black"
force_single_line = "True"


[tool.coverage.run]
branch = true
parallel = true
source = ["beamer"]
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_also = [
    "if __name__ == \"__main__\":",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.pytest.ini_options]
testpaths = ["test"]
addopts = "--doctest-modules --doctest-glob=*.test --doctest-glob=*.md" 
doctest_optionflags = ["ELLIPSIS", "NORMALIZE_WHITESPACE"]

[tool.tox]
envlist = ["lints", "tests"]

[tool.tox.env.lints]
deps = [".[lint]"]
commands = [
    ["black", "-S", "--check", "beamer"],
    ["blackdoc", "-S", "--check", "beamer"],
    ["flake8", "beamer"],
    ["mypy", "beamer"],
]

[tool.tox.env.tests]
deps = [".[test]"]
commands = [
    ["py.test", "--cov=beamer", "beamer", "tests" ]
]

[tool.tox.env.devs]
deps = [".[develop]"]
commands = [
    ["py.test", "--exitfirst", "beamer", "tests" ]
]

[tool.tox.env.pudb]
deps = [".[develop]"]
commands = [
    ["py.test", "--pudb", "beamer", "tests" ]
]

[project.scripts]
beamer = "beamer.__main__:main"
